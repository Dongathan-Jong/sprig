/*
First time? Check out the tutorial game:
https://sprig.hackclub.com/gallery/getting_started

@title: 
@author: 
@tags: []
@addedOn: 2024-00-00
*/

const underscore = "u"
const zero = "0"
const one = "1"
const two = "2"
const three = "3"
const four = "4"
const zerounderscore = "5"
const oneunderscore = "6"
const twounderscore = "7"
const threeunderscore = "8"
const fourunderscore = "9"
const arrow = "a"
const crossBox = "c"
const correct = "g"
const wrong = "r"

let guess = 0
let currentGuess = 1
let currentDigit = 0
let answer = [];
let guesses = [];
let correctDigits = 0;

setLegend(
  [ underscore, bitmap`
................
................
................
................
................
................
................
................
................
................
................
................
................
................
................
.00000000000000.`],
  [ zero, bitmap`
................
................
................
.....000000.....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
.....000000.....
................
................
................`],
  [ one, bitmap`
................
................
................
........0.......
.......00.......
......0.0.......
........0.......
........0.......
........0.......
........0.......
........0.......
........0.......
......00000.....
................
................
................`],
  [ two, bitmap`
................
................
................
......000.......
.....0...0......
..........0.....
..........0.....
..........0.....
.........0......
.......00.......
......0.........
.....0..........
.....000000.....
................
................
................`],
  [ three, bitmap`
................
................
................
.....000000.....
....0......0....
...........0....
...........0....
.......0000.....
...........0....
...........0....
...........0....
....0......0....
.....000000.....
................
................
................`],
  [ four, bitmap`
................
................
................
.........0......
........00......
.......0.0......
......0..0......
.....0...0......
....0....0......
...0.....0......
...0000000......
.........0......
.........0......
................
................
................`],
  [ zerounderscore, bitmap`
................
................
................
.....000000.....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
....0......0....
.....000000.....
................
................
.00000000000000.`],
  [ oneunderscore, bitmap`
................
................
................
........0.......
.......00.......
......0.0.......
........0.......
........0.......
........0.......
........0.......
........0.......
........0.......
......00000.....
................
................
.00000000000000.`],
  [ twounderscore, bitmap`
................
................
................
......000.......
.....0...0......
..........0.....
..........0.....
..........0.....
.........0......
.......00.......
......0.........
.....0..........
.....000000.....
................
................
.00000000000000.`],
  [ threeunderscore, bitmap`
................
................
................
.....000000.....
....0......0....
...........0....
...........0....
.......0000.....
...........0....
...........0....
...........0....
....0......0....
.....000000.....
................
................
.00000000000000.`],
  [ fourunderscore, bitmap`
................
................
................
.........0......
........00......
.......0.0......
......0..0......
.....0...0......
....0....0......
...0.....0......
...0000000......
.........0......
.........0......
................
................
.00000000000000.`],
  [ arrow, bitmap`
................
................
......33333.....
......33333.....
......33333.....
......33333.....
......33333.....
......33333.....
......33333.....
...33333333333..
....333333333...
.....3333333....
......33333.....
.......333......
........3.......
................`],
  [ crossBox, bitmap`
.33333333333333.
33............33
3.3..........3.3
3..3........3..3
3...3......3...3
3....3....3....3
3.....3..3.....3
3......33......3
3......33......3
3.....3..3.....3
3....3....3....3
3...3......3...3
3..3........3..3
3.3..........333
33............33
.33333333333333.`],
  [ correct, bitmap`
4444444444444444
4444444444444444
44............44
44............44
44............44
44............44
44............44
44............44
44............44
44............44
44............44
44............44
44............44
44............44
4444444444444444
4..............4`],
  [ wrong, bitmap`
3333333333333333
3333333333333333
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
33............33
3333333333333333
3..............3`],
)

addText("SPRIGLE", { 
  x: 6,
  y: 0,
  color: color`0`
})

setSolids([])

let level = 0
const levels = [
  map`
.....
uuuuu
uuuuu
uuuuu
uuuuu
a....
01234`,
  map`
.uuuuu.
.uuuuu.
.uuuuu.
.uuuuu.
.uuuuu.
.a.....
.01234.`,
  map`
.....
uuuuu
uuuuu
uuuuu
a....
01234`,
  map`
.....
uuuuu
uuuuu
uuuuu
a....
01234`
  
]

const currentLevel = levels[level];

answer = [1,2,3,0,4];

setMap(levels[level])

setPushables({
  [arrow]: []
});



onInput("a", () => {
  getFirst(arrow).x -= 1; 
  if(guess > 0)
  {
    guess--;
  }
});

onInput("d", () => {
  getFirst(arrow).x += 1; 
  if(guess < 4)
  {
    guess++;
  }
});

onInput("w", () => {
  addSprite(guess,6,crossBox);
  switch(currentDigit)
    {
      case 0:
        guesses[0] = guess;
        break;
      case 1:
        guesses[1] = guess;
        break;
      case 2:
        guesses[2] = guess;
        break;
      case 3:
        guesses[3] = guess;
        break;
      case 4:
        guesses[4] = guess;
        break;
    }
   switch(guess)
     {
       case 0:
         addSprite(currentDigit,currentGuess,zerounderscore);
         currentDigit++;
         break;
      case 1:
         addSprite(currentDigit,currentGuess,oneunderscore);
         currentDigit++;
         break;
      case 2:
         addSprite(currentDigit,currentGuess,twounderscore);
         currentDigit++;
         break;
      case 3:
         addSprite(currentDigit,currentGuess,threeunderscore);
         currentDigit++;
         break;
      case 4:
         addSprite(currentDigit,currentGuess,fourunderscore);
         currentDigit++;
         break;
     }
  
});

onInput("s", () => {
   
   currentDigit = 0;
   for(let i = 0; i < 5; i++)
     {
       if(guesses[i] == answer[i])
       {
         addSprite(i, currentGuess, correct);
         correctDigits++;
       }
       else
       {
         addSprite(i, currentGuess, wrong);
       }
     }
  currentGuess++;
  clearGuesses();
  
});

function clearGuesses()
{
  for(let i = 0; i < 5; i++)
    {
      clearTile(i,6)
    }
  addSprite(0,6,zero)
  addSprite(1,6,one)
  addSprite(2,6,two)
  addSprite(3,6,three)
  addSprite(4,6,four)
}

if(correctDigits == 5)
{
  level = level + 1
  setMap(currentlevel);
}

afterInput(() => {
  
})